检测到魔术字符MZ，可能是一个PE文件，继续解析。。。
定位到PE header偏移量为： 0x00000100
PE签名：PE
machine type(处理器)：34404    IMAGE_FILE_MACHINE_AMD64
扇区数量：7
PE文件生成时间（link)：Thu Aug 18 13:49:38 2022
 
符号表偏移量（symbol table)：0x00000000
符号数量（symbol number)：0
00f0
optional header size：240
0022
characteristic value：34
下面输出启用了的标志位：
	cao草你妈吗Image only. This indicates that the image file is valid and can be run. If this flag is not set, it indicates a linker error.仅适用于镜像文件，这个标志位表明了该镜像文件是合法的，可以正常运行，如果这个标志位没有启用，则说明存在链接器错误
	Application can handle > 2-GB addresses.此程序能够处理>2GB的地址

？？？？？？？？？？？？？？？？？？？？？？？？？？？？？开始----OPTIONAL HEADER----开始？？？？？？？？？？？？？？？？？？？？？？？？？？？？？
==================================开始----STD部分----开始==================================
020b
magic：PE32+，也就是64位
链接器主版本号：14
链接器次版本号：29
PE文件中.text扇区的大小：72192 bytes
PE文件中.data扇区的大小：57344 bytes
PE文件中.bss扇区的大小：0 bytes
entry point（RVA）地址：0x00001710
base of code（RVA）地址：0x00001000

==================================结束----STD部分----结束==================================

==================================开始----windows部分----开始==================================
image base地址：0x140000000
section_alignment：4096 bytes
file _alignment：512 bytes
操作系统主版本号：6 
操作系统次版本号：0 
镜像文件主版本号：0 
镜像文件次版本号：0 
子系统主版本号：6 
子系统次版本号：0 
镜像加载到内存之后的大小：151552 bytes
header总大小（向上取整filealignment）：1024 bytes
checksum：0 
子系统：
	字符（命令行）子系统
dll chacacteristic：
	DLL can be relocated at load time.DLL在加载的时候可以被重新定位
	Image is NX compatible。 NX意为no-execute是一种内存保护措施
	Terminal Server aware.我不知道这个到底是什么意思
size_of_stack_reserve_64：0x000100000 bytes
size_of_stack_commit_64：0x000001000 bytes
size_of_heap_reserve_64：0x000100000 bytes
size_of_heap_commit_64：0x000001000 bytes
data directory数量：16

==================================结束----windows部分----结束==================================

==================================开始----data directory部分----开始==================================
export_table：
	地址（RVA）：	0x00000000
	size：		0 bytes

import_table：
	地址（RVA）：	0x0001cad8
	size：		40 bytes

resource_table：
	地址（RVA）：	0x00023000
	size：		480 bytes

exception_table：
	地址（RVA）：	0x00020000
	size：		4200 bytes

certificate_table：
	地址（RVA）：	0x00000000
	size：		0 bytes

base_relocation_table：
	地址（RVA）：	0x00024000
	size：		1628 bytes

debug：
	地址（RVA）：	0x0001b7ac
	size：		112 bytes

architecture：
	地址（RVA）：	0x00000000
	size：		0 bytes

global_ptr：
	地址（RVA）：	0x00000000
	size：		0 bytes

tls_table：
	地址（RVA）：	0x00000000
	size：		0 bytes

load_config_table：
	地址（RVA）：	0x0001b820
	size：		312 bytes

bound_import：
	地址（RVA）：	0x00000000
	size：		0 bytes

iat：
	地址（RVA）：	0x00013000
	size：		616 bytes

delay_import_descriptor：
	地址（RVA）：	0x00000000
	size：		0 bytes

clr_runtime_header：
	地址（RVA）：	0x00000000
	size：		0 bytes


==================================结束----data directory部分----结束==================================

？？？？？？？？？？？？？？？？？？？？？？？？？？？？？结束----OPTIONAL HEADER----结束？？？？？？？？？？？？？？？？？？？？？？？？？？？？？

￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥开始----SECTION HEADERs----开始￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：.text
virtual size：71872 bytes
virtual_address（RVA）：0x00001000
size_of_raw_data：72192 bytes
pointer_to_raw_data（在PE文件中的地址）：0x00000400
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains executable code.
	The section can be executed as code.
	The section can be read.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：.rdata
virtual size：41722 bytes
virtual_address（RVA）：0x00013000
size_of_raw_data：41984 bytes
pointer_to_raw_data（在PE文件中的地址）：0x00011e00
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains initialized data.
	The section can be read.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：.data
virtual size：7224 bytes
virtual_address（RVA）：0x0001e000
size_of_raw_data：3072 bytes
pointer_to_raw_data（在PE文件中的地址）：0x0001c200
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains initialized data.
	The section can be read.
	The section can be written to.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：.pdata
virtual size：4200 bytes
virtual_address（RVA）：0x00020000
size_of_raw_data：4608 bytes
pointer_to_raw_data（在PE文件中的地址）：0x0001ce00
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains initialized data.
	The section can be read.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：_RDATA
virtual size：252 bytes
virtual_address（RVA）：0x00022000
size_of_raw_data：512 bytes
pointer_to_raw_data（在PE文件中的地址）：0x0001e000
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains initialized data.
	The section can be read.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：.rsrc
virtual size：480 bytes
virtual_address（RVA）：0x00023000
size_of_raw_data：512 bytes
pointer_to_raw_data（在PE文件中的地址）：0x0001e200
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains initialized data.
	The section can be read.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
扇区(section)m名称：.reloc
virtual size：1628 bytes
virtual_address（RVA）：0x00024000
size_of_raw_data：2048 bytes
pointer_to_raw_data（在PE文件中的地址）：0x0001e400
pointer_to_relocations：0x00000000
pointer_to_linenumbers：0x00000000
number_of_relocations：0x00000000
number_of_linenumbers：0x00000000
扇区（section）characteristic flag：
	下面输出启用了的标志位：
	The section contains initialized data.
	The section can be discarded as needed.
	The section can be read.


￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥结束----SECTION HEADERs----结束￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@开始----解析data directory----开始@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--------------------------import table
	Import Lookup Table RVA：0x1cb00
	时间戳：0x0
	forward chain：0x0
	DLL name address(RVA)：0x1cda6
小伙子你怎么回事？
小伙子你怎么回事？
小伙子你怎么回事？
DLL的名字是：KERNEL32.dll
	Import Address Table RVA：0x13000
没有绑定
HINT/NAME table RVA：
	0x1cd68
HINT：0x58f
KERNEL32.dll-------函数名：	Sleep
HINT/NAME table RVA：
	0x1cd70
HINT：0x26a
KERNEL32.dll-------函数名：	GetLastError
HINT/NAME table RVA：
	0x1cd80
HINT：0x24a
KERNEL32.dll-------函数名：	GetFileAttributesA
HINT/NAME table RVA：
	0x1cd96
HINT：0x45c
KERNEL32.dll-------函数名：	QueueUserAPC
HINT/NAME table RVA：
	0x1d2ea
HINT：0x624
KERNEL32.dll-------函数名：	WriteConsoleW
HINT/NAME table RVA：
	0x1cdb4
HINT：0x62e
KERNEL32.dll-------函数名：	WriteProcessMemory
HINT/NAME table RVA：
	0x1cdca
HINT：0x27e
KERNEL32.dll-------函数名：	GetModuleHandleA
HINT/NAME table RVA：
	0x1cdde
HINT：0x412
KERNEL32.dll-------函数名：	OpenProcess
HINT/NAME table RVA：
	0x1cdec
HINT：0x3f6
KERNEL32.dll-------函数名：	MultiByteToWideChar
HINT/NAME table RVA：
	0x1ce02
HINT：0x351
KERNEL32.dll-------函数名：	HeapAlloc
HINT/NAME table RVA：
	0x1ce0e
HINT：0x2b8
KERNEL32.dll-------函数名：	GetProcAddress
HINT/NAME table RVA：
	0x1ce20
HINT：0x5da
KERNEL32.dll-------函数名：	VirtualAllocEx
HINT/NAME table RVA：
	0x1ce32
HINT：0x2be
KERNEL32.dll-------函数名：	GetProcessHeap
HINT/NAME table RVA：
	0x1ce44
HINT：0x419
KERNEL32.dll-------函数名：	OpenThread
HINT/NAME table RVA：
	0x1ce52
HINT：0x89
KERNEL32.dll-------函数名：	CloseHandle
HINT/NAME table RVA：
	0x1ce60
HINT：0x4d5
KERNEL32.dll-------函数名：	RtlCaptureContext
HINT/NAME table RVA：
	0x1ce74
HINT：0x4dc
KERNEL32.dll-------函数名：	RtlLookupFunctionEntry
HINT/NAME table RVA：
	0x1ce8e
HINT：0x4e3
KERNEL32.dll-------函数名：	RtlVirtualUnwind
HINT/NAME table RVA：
	0x1cea2
HINT：0x5c0
KERNEL32.dll-------函数名：	UnhandledExceptionFilter
HINT/NAME table RVA：
	0x1cebe
HINT：0x57f
KERNEL32.dll-------函数名：	SetUnhandledExceptionFilter
HINT/NAME table RVA：
	0x1cedc
HINT：0x220
KERNEL32.dll-------函数名：	GetCurrentProcess
HINT/NAME table RVA：
	0x1cef0
HINT：0x59e
KERNEL32.dll-------函数名：	TerminateProcess
HINT/NAME table RVA：
	0x1cf04
HINT：0x38c
KERNEL32.dll-------函数名：	IsProcessorFeaturePresent
HINT/NAME table RVA：
	0x1cf20
HINT：0x452
KERNEL32.dll-------函数名：	QueryPerformanceCounter
HINT/NAME table RVA：
	0x1cf3a
HINT：0x221
KERNEL32.dll-------函数名：	GetCurrentProcessId
HINT/NAME table RVA：
	0x1cf50
HINT：0x225
KERNEL32.dll-------函数名：	GetCurrentThreadId
HINT/NAME table RVA：
	0x1cf66
HINT：0x2f3
KERNEL32.dll-------函数名：	GetSystemTimeAsFileTime
HINT/NAME table RVA：
	0x1cf80
HINT：0x36f
KERNEL32.dll-------函数名：	InitializeSListHead
HINT/NAME table RVA：
	0x1cf96
HINT：0x385
KERNEL32.dll-------函数名：	IsDebuggerPresent
HINT/NAME table RVA：
	0x1cfaa
HINT：0x2da
KERNEL32.dll-------函数名：	GetStartupInfoW
HINT/NAME table RVA：
	0x1cfbc
HINT：0x281
KERNEL32.dll-------函数名：	GetModuleHandleW
HINT/NAME table RVA：
	0x1cfd0
HINT：0x4e2
KERNEL32.dll-------函数名：	RtlUnwindEx
HINT/NAME table RVA：
	0x1cfde
HINT：0x541
KERNEL32.dll-------函数名：	SetLastError
HINT/NAME table RVA：
	0x1cfee
HINT：0x138
KERNEL32.dll-------函数名：	EnterCriticalSection
HINT/NAME table RVA：
	0x1d006
HINT：0x3c4
KERNEL32.dll-------函数名：	LeaveCriticalSection
HINT/NAME table RVA：
	0x1d01e
HINT：0x114
KERNEL32.dll-------函数名：	DeleteCriticalSection
HINT/NAME table RVA：
	0x1d036
HINT：0x36b
KERNEL32.dll-------函数名：	InitializeCriticalSectionAndSpinCount
HINT/NAME table RVA：
	0x1d05e
HINT：0x5b0
KERNEL32.dll-------函数名：	TlsAlloc
HINT/NAME table RVA：
	0x1d06a
HINT：0x5b2
KERNEL32.dll-------函数名：	TlsGetValue
HINT/NAME table RVA：
	0x1d078
HINT：0x5b3
KERNEL32.dll-------函数名：	TlsSetValue
HINT/NAME table RVA：
	0x1d086
HINT：0x5b1
KERNEL32.dll-------函数名：	TlsFree
HINT/NAME table RVA：
	0x1d090
HINT：0x1b4
KERNEL32.dll-------函数名：	FreeLibrary
HINT/NAME table RVA：
	0x1d09e
HINT：0x3ca
KERNEL32.dll-------函数名：	LoadLibraryExW
HINT/NAME table RVA：
	0x1d0b0
HINT：0x468
KERNEL32.dll-------函数名：	RaiseException
HINT/NAME table RVA：
	0x1d0c2
HINT：0x167
KERNEL32.dll-------函数名：	ExitProcess
HINT/NAME table RVA：
	0x1d0d0
HINT：0x280
KERNEL32.dll-------函数名：	GetModuleHandleExW
HINT/NAME table RVA：
	0x1d0e6
HINT：0x2dc
KERNEL32.dll-------函数名：	GetStdHandle
HINT/NAME table RVA：
	0x1d0f6
HINT：0x625
KERNEL32.dll-------函数名：	WriteFile
HINT/NAME table RVA：
	0x1d102
HINT：0x27d
KERNEL32.dll-------函数名：	GetModuleFileNameW
HINT/NAME table RVA：
	0x1d118
HINT：0x1df
KERNEL32.dll-------函数名：	GetCommandLineA
HINT/NAME table RVA：
	0x1d12a
HINT：0x1e0
KERNEL32.dll-------函数名：	GetCommandLineW
HINT/NAME table RVA：
	0x1d13c
HINT：0x355
KERNEL32.dll-------函数名：	HeapFree
HINT/NAME table RVA：
	0x1d148
HINT：0x9e
KERNEL32.dll-------函数名：	CompareStringW
HINT/NAME table RVA：
	0x1d15a
HINT：0x3b8
KERNEL32.dll-------函数名：	LCMapStringW
HINT/NAME table RVA：
	0x1d16a
HINT：0x258
KERNEL32.dll-------函数名：	GetFileType
HINT/NAME table RVA：
	0x1d178
HINT：0x17e
KERNEL32.dll-------函数名：	FindClose
HINT/NAME table RVA：
	0x1d184
HINT：0x184
KERNEL32.dll-------函数名：	FindFirstFileExW
HINT/NAME table RVA：
	0x1d198
HINT：0x195
KERNEL32.dll-------函数名：	FindNextFileW
HINT/NAME table RVA：
	0x1d1a8
HINT：0x392
KERNEL32.dll-------函数名：	IsValidCodePage
HINT/NAME table RVA：
	0x1d1ba
HINT：0x1bb
KERNEL32.dll-------函数名：	GetACP
HINT/NAME table RVA：
	0x1d1c4
HINT：0x2a1
KERNEL32.dll-------函数名：	GetOEMCP
HINT/NAME table RVA：
	0x1d1d0
HINT：0x1ca
KERNEL32.dll-------函数名：	GetCPInfo
HINT/NAME table RVA：
	0x1d1dc
HINT：0x611
KERNEL32.dll-------函数名：	WideCharToMultiByte
HINT/NAME table RVA：
	0x1d1f2
HINT：0x241
KERNEL32.dll-------函数名：	GetEnvironmentStringsW
HINT/NAME table RVA：
	0x1d20c
HINT：0x1b3
KERNEL32.dll-------函数名：	FreeEnvironmentStringsW
HINT/NAME table RVA：
	0x1d226
HINT：0x524
KERNEL32.dll-------函数名：	SetEnvironmentVariableW
HINT/NAME table RVA：
	0x1d240
HINT：0x55b
KERNEL32.dll-------函数名：	SetStdHandle
HINT/NAME table RVA：
	0x1d250
HINT：0x2e1
KERNEL32.dll-------函数名：	GetStringTypeW
HINT/NAME table RVA：
	0x1d262
HINT：0x1a8
KERNEL32.dll-------函数名：	FlushFileBuffers
HINT/NAME table RVA：
	0x1d276
HINT：0x209
KERNEL32.dll-------函数名：	GetConsoleOutputCP
HINT/NAME table RVA：
	0x1d28c
HINT：0x205
KERNEL32.dll-------函数名：	GetConsoleMode
HINT/NAME table RVA：
	0x1d29e
HINT：0x256
KERNEL32.dll-------函数名：	GetFileSizeEx
HINT/NAME table RVA：
	0x1d2ae
HINT：0x533
KERNEL32.dll-------函数名：	SetFilePointerEx
HINT/NAME table RVA：
	0x1d2c2
HINT：0x35a
KERNEL32.dll-------函数名：	HeapSize
HINT/NAME table RVA：
	0x1d2ce
HINT：0x358
KERNEL32.dll-------函数名：	HeapReAlloc
HINT/NAME table RVA：
	0x1d2dc
HINT：0xce
KERNEL32.dll-------函数名：	CreateFileW
